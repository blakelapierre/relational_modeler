
// [model, result, sql, import] = ["model", "result", "sql", "import"].map(n => document.getElementBy)

import {api, GrammarError} from '../api';

const delimiter = '^', quote = '~';

const currentEngine = 'postgresql';

document.addEventListener('DOMContentLoaded', () => {
  const modelArea = document.getElementsByTagName('modelarea')[0],
        modelAreaTextArea = modelArea.getElementsByTagName('textarea')[0],
        errorArea = modelArea.getElementsByTagName('errorarea')[0],
        resultArea = document.getElementsByTagName('resultarea')[0],
        sqlArea = document.getElementsByTagName('sqlarea')[0],
        sqlAreaTextArea = sqlArea.getElementsByTagName('textarea')[0],
        importArea = document.getElementsByTagName('importarea')[0],
        importAreaTextArea = importArea.getElementsByTagName('textarea')[0];

  modelAreaTextArea.addEventListener('keyup', ({target}) => a(target.value));

  a(modelAreaTextArea.value);

  function a(value) {
    try {
      const {schema, imports} = api(value, currentEngine, delimiter, quote);

      sqlAreaTextArea.value = schema.join('\n') + '\n';
      importAreaTextArea.value = imports.join('\n') + '\n';
      errorArea.classList.remove('has-error');
    }
    catch (e) {
      console.log('error!', e);
      if (e instanceof(GrammarError)) {
        const {match} = e;
        errorArea.classList.add('has-error');
        errorArea.innerHTML = match.message;
      }
      else {
        errorArea.classList.add('has-error');
        errorArea.innerHTML = e.message;
      }
    }
  }
});

function processModel(engine, model) {
  return api(model, currentEngine, delimiter, quote);
}

