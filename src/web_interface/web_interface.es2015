
// [model, result, sql, import] = ["model", "result", "sql", "import"].map(n => document.getElementBy)

import orderTables from '../transformers/orderTables';
import toPostgreSQL from '../transformers/postgreSQL/toPostgreSQL';

import  ohm from 'ohm-js';

import rm_pgsql_grammar from '../grammar/RM.ohm.js';
import rm_pgsql_toObject from '../grammar/RM_PGSQL.toObject.semantics';

const delimiter = '^', quote = '~';

const engines = {
  'postgresql': {
    grammar: {
      'name': 'RM_PGSQL',
      'text': rm_pgsql_grammar
    },
    semantics: {
      'toObject': rm_pgsql_toObject
    },
    generator: toPostgreSQL
  }
};

const currentEngine = 'postgresql';

document.addEventListener('DOMContentLoaded', () => {
  const modelArea = document.getElementsByTagName('modelarea')[0],
        modelAreaTextArea = modelArea.getElementsByTagName('textarea')[0],
        resultArea = document.getElementsByTagName('resultarea')[0],
        sqlArea = document.getElementsByTagName('sqlarea')[0],
        sqlAreaTextArea = sqlArea.getElementsByTagName('textarea')[0],
        importArea = document.getElementsByTagName('importarea')[0],
        importAreaTextArea = importArea.getElementsByTagName('textarea')[0];

  modelAreaTextArea.addEventListener('keyup', ({target}) => a(target));

  a(modelAreaTextArea.value);

  function a(value) {
    try {
      const {grammar, semantics, engine} = loadEngineGrammarWithSemantics(currentEngine);
      console.log({grammar, semantics});

      const match = grammar.match(value);

      if (match.succeeded()) {
        const model = semantics(match).toObject();

        console.log({model});

        const {schema, imports} = processModel(engine, model);

        sqlAreaTextArea.value = schema.join('\n') + '\n';
        importAreaTextArea.value = imports.join('\n') + '\n';
      }
      else {
        console.log('didn\'t match!', {match});
      }
    }
    catch (e) {
      console.log('error!', e);
    }
  }
});

function processModel(engine, model) {
  return engine.generator(orderTables(model), delimiter, quote);
}

function loadEngineGrammarWithSemantics(engineName) {
  const engine = engines[engineName];

  const grammar = ohm.grammars(engine.grammar.text)[engine.grammar.name],
        semantics = grammar.semantics();

  for (let name in engine.semantics) semantics.addOperation(name, engine.semantics[name]);

  return {grammar, semantics, engine};
}