{"version":3,"names":[],"mappings":"","sources":["grammar/RM.toObject.semantics.js"],"sourcesContent":["import {join, first} from './util';\n\nconst defaultType = 'text',\n      defaultPrimaryKeyType = 'bigserial';\n\nexport default {\n  ListOf_some (element, separator, rest) {\n    return [element.toObject()].concat(rest.toObject());\n  },\n\n  IContained (open, element, close) {\n    return element.toObject();\n  },\n\n  Model (name, commonAttributes, schemas) {\n    return join({name, commonAttributes: first(commonAttributes) || [], schemas});\n  },\n\n  Schema (name, commonAttributes, tables) {\n    return join({name, commonAttributes: first(commonAttributes) || [], tables});\n  },\n\n  Table (name, attributes, dependencies) {\n    return join({name, attributes: first(attributes), dependencies});\n  },\n\n  Attribute (primaryKey, name, optional, type) {\n    primaryKey = first(primaryKey) === '!';\n    type = first(type) || (primaryKey ? defaultPrimaryKeyType : defaultType);\n    return join({name, primaryKey, optional: first(optional) === '?', type});\n  },\n\n  Type (type) {\n    return type.toObject();\n  },\n\n  List (values) {\n    return join({type: 'List', values});\n  },\n\n  Set (values) {\n    return join({type: 'Set', values});\n  },\n\n  Dependency (preArity, glyph, postArity, reference) {\n    return join({\n      preArity: first(preArity) || '*',\n      postArity: first(postArity) || '*',\n      reference\n    });\n  },\n\n  SchemaTableName (schema, dot, table) {\n    return join({schema, table});\n  },\n\n  TableName (table) {\n    return join({table});\n  },\n\n  name (first_character, additional_characters) {\n    return this.interval.contents;\n  }\n};"],"file":"grammar/RM.toObject.semantics.js","sourceRoot":"/source/"}