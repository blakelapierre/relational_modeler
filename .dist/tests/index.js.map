{"version":3,"names":[],"mappings":"","sources":["tests/index.js"],"sourcesContent":["require('../traceur-runtime');\n\nimport fs from 'fs';\nimport util from 'util';\n\nimport ohm from 'ohm-js';\nimport _ from 'lodash';\n\nimport orderTables from '../transformers/orderTables';\nimport toPostgreSQL from '../transformers/postgreSQL/toPostgreSQL';\n\nconst {grammar, semantics} = loadGrammarWithSemantics('RM_PGSQL', ['toObject'], './grammar/RM.ohm');\n\nconst model = run('./tests/samples/personal.model', grammar, semantics, 'toObject');\n\nlog(util.inspect(model, false, null));\n\nlog(toPostgreSQL(orderTables(model)).join('\\n'));\n\nfunction loadGrammarWithSemantics(grammarName, semanticNames = [], fileName = `./grammar/${grammarName}.ohm`) {\n  const grammar = ohm.grammars(fs.readFileSync(fileName))[grammarName],\n        semantics = grammar.semantics();\n\n  semanticNames.forEach(addSemanticName);\n\n  return {grammar, semantics};\n\n  function addSemanticName(name) {\n    semantics.addOperation(name, require(`../grammar/${grammarName}.${name}.semantics`).default);\n  }\n}\n\nfunction run(modelFile, grammar, semantics, operation) {\n  const match = grammar.match(fs.readFileSync(modelFile).toString());\n  if (match.succeeded()) {\n    const result = semantics(match).toObject();\n    return result;\n  }\n  else {\n    console.error(match.message);\n  }\n}\n\nfunction log(...args) {\n  console.log.apply(console, args.map(transformArg));\n\n  function transformArg(arg) {\n    switch (typeof arg) {\n      case 'object': return util.inspect(arg, {showHidden: true, depth: null});\n      default: return arg;\n    }\n  }\n}"],"file":"tests/index.js","sourceRoot":"/source/"}