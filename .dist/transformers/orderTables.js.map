{"version":3,"names":[],"mappings":"","sources":["transformers/orderTables.js"],"sourcesContent":["import _ from 'lodash';\nimport tsort from 'tsort';\n\nexport default function orderTables(model) {\n  const {schemas} = model;\n\n  const orderedTables = _.reject(topologicalSort(_.flatMap(_.map(schemas, getSchemaLinks))).reverse(), v => v === '*'); // * represents a \"null-link\", it is not a real table; it is only used to include all tables (including those with no dependencies) in the array outputted by `topologicalSort`, without having to rewalk the model to determine which tables have no dependencies\n\n  return {model, orderedTables};\n\n  function topologicalSort(links) {\n    return tsort(links).sort(); // Note: `tsort` only sets up the graph, must call `sort` to get the ordering. I had initially begun to implement my own topological sort, as `model` already contains a graph of the dependencies, but abandoned it due to finding this library function. If performance is ever a concern, there is a bit of optimization that can be done here.\n  }\n\n  function getSchemaLinks({name: schemaName, tables}) {\n    return _.flatMap(_.map(tables, getTableLinks));\n\n    function getTableLinks(table) {\n      const {name, dependencies} = table;\n      if (dependencies.length === 0) return [[`${schemaName}.${name}`, '*']];\n      return _.map(dependencies, ({reference: {schema, table}}) => [`${schemaName}.${name}`, `${schema || schemaName}.${table}`]);\n    }\n  }\n}"],"file":"transformers/orderTables.js","sourceRoot":"/source/"}