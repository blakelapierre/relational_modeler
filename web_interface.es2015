
// [model, result, sql, import] = ["model", "result", "sql", "import"].map(n => document.getElementBy)

import {api, GrammarError, SemanticError} from '../api';

const delimiter = '^', quote = '~';

const samples = {
  'example':
`database_name {
  schema_name {
    table_name {
      @primaryKey,
      attribute
    } -> foreign_table

    foreign_table {
      @primaryKey,
      attribute? boolean
    }
  }
}`,
  'experiments':
`experiments { @id, inserted_at timestamp } {
  binary {
    coin_flip {
      outcome { 'H', 'T' }
    }
  }
}`,
  'accounting':
`dist {@id, inserted_at timestamp} {
  accounts {
    account {key}
    account_feature -> account -> features.feature
  }

  features {
    feature {description} -> feature (parent_feature)
    feature_cost {cost numeric} -> feature
    feature_schedule {global_unlock_value numeric} -> feature
    feature_progress {contributed_value numeric} -> feature
  }

  transactions {
    transaction -> accounts.account
    transaction_detail {amount numeric} -> transaction
    transaction_account_feature -> accounts.account_feature -> transaction_detail
  }
}`,
  'company':
`company {@id, inserted_at timestamp} {
  personnel {
    employee {name}

    employee_engagement {start timestamp, end? timestamp > start, salary money} -> employee
  }

  payroll {
    payment {amount money}

    employee_payment {occurred timestamp} -> personnel.employee_engagement -> payment
  }

  operations {
    task {name, description}

    task_assignment {active boolean} -> !task -> !personnel.employee
    task_update {update text} -> task_assignment
  }
}`,
  'usda_sr28':
`usda {
 sr28 {
  FOOD_DES {
    @NDB_No text,
    Long_Desc,
    Short_Desc,
    ComName?,
    ManufacName?,
    Survey?,
    Ref_desc?,
    Refuse?,
    SciName?,
    N_Factor?,
    Pro_Factor?,
    Fat_Factor?,
    CHO_Factor?
  } -> FD_GROUP

  FD_GROUP {
    @FdGrp_Cd text,
    FdGrp_Desc
  }

  LANGUAL {
    @NDB_No text,
    @Factor_Code text
  }

  LANGDESC {
    @Factor_Code text,
    Description
  }

  NUT_DATA {
    @NDB_No text,
    @Nutr_No text,
    Nutr_Val numeric(10,3),
    Num_Data_Pts? numeric(5),
    Std_Error? numeric(8,3),
    Ref_NDB_No?,
    Add_Nutr_Mark?,
    Num_Studies? numeric,
    Min? numeric(10,3),
    Max? numeric(10,3),
    DF? numeric(4),
    Low_EB? numeric(10,3),
    Up_EB? numeric(10,3),
    Stat_cmt?,
    AddMod_Date?,
    CC?
  } -> SRC_CD
    -> DERIV_CD?

  NUTR_DEF {
    @Nutr_No text,
    Units,
    Tagname?,
    NutrDesc,
    Num_Dec,
    SR_Order numeric(6)
  }

  SRC_CD {
    @Src_Cd text,
    SrcCd_Desc
  }

  DERIV_CD {
    @Deriv_Cd text,
    Deriv_Desc
  }

  WEIGHT {
    @NDB_No text,
    @Seq text,
    Amount numeric,
    Msre_Desc,
    Gm_Wgt numeric(7,1),
    Num_Data_Pts? numeric(4),
    Std_Dev? numeric(7,3)
  }

  FOOTNOTE {
    NDB_No,
    Footnt_No,
    Footnt_Typ,
    Nutr_No?,
    Footnt_Txt
  }

  DATSRCLN {
    @NDB_No text,
    @Nutr_No text
  } -> @DATA_SRC

  DATA_SRC {
    @DataSrc_ID text,
    Authors?,
    Title,
    Year?,
    Journal?,
    Vol_City?,
    Issue_State?,
    Start_Page?,
    End_Page?
  }
 }
}`
};

document.addEventListener('DOMContentLoaded', () => {
  const modelArea = document.getElementsByTagName('modelarea')[0],
        modelAreaSelect = modelArea.getElementsByTagName('select')[0],
        modelAreaTextArea = modelArea.getElementsByTagName('textarea')[0],
        errorArea = modelArea.getElementsByTagName('errorarea')[0],
        resultArea = document.getElementsByTagName('resultarea')[0],
        sqlArea = document.getElementsByTagName('sqlarea')[0],
        sqlAreaSelect = sqlArea.getElementsByTagName('select')[0],
        sqlAreaTextArea = sqlArea.getElementsByTagName('textarea')[0],
        importArea = document.getElementsByTagName('importarea')[0],
        importAreaSelect = importArea.getElementsByTagName('select')[0],
        importAreaTextArea = importArea.getElementsByTagName('textarea')[0];

  let currentEngine = sqlAreaSelect.options[sqlAreaSelect.selectedIndex].value,
      importMethod = importAreaSelect.options[importAreaSelect.selectedIndex].value;

  modelAreaTextArea.addEventListener('keyup', ({target}) => a(target.value));

  modelAreaSelect.selectedIndex = 0;
  modelAreaTextArea.value = samples[modelAreaSelect.options[modelAreaSelect.selectedIndex].value];

  modelAreaSelect.addEventListener('change', () => {
    modelAreaTextArea.value = samples[modelAreaSelect.options[modelAreaSelect.selectedIndex].value];
    a(modelAreaTextArea.value);
  });

  sqlAreaSelect.addEventListener('change', () => {
    currentEngine = sqlAreaSelect.options[sqlAreaSelect.selectedIndex].value;
    a(modelAreaTextArea.value);
  });
  importArea.addEventListener('change', () => {
    importMethod = importAreaSelect.options[importAreaSelect.selectedIndex].value;
    a(modelAreaTextArea.value);
  });

  a(modelAreaTextArea.value);

  function a(value) {
    try {
      const {schema, imports} = api(value, currentEngine, delimiter, quote, importMethod);

      sqlAreaTextArea.value = schema.join('\n') + '\n';
      importAreaTextArea.value = imports.join('\n') + '\n';
      errorArea.classList.remove('has-error');
    }
    catch (e) {
      console.log('error!', {e});
      if (e instanceof(GrammarError)) {
        const {match} = e;
        errorArea.classList.add('has-error');
        errorArea.innerHTML = match.message;
      }
      else if (e instanceof(SemanticError)) {
        errorArea.classList.add('has-error');
        errorArea.innerHTML = e.message;
      }
      else {
        errorArea.classList.add('has-error');
        errorArea.innerHTML = e.stack;
      }
    }
  }
});

function processModel(engine, model) {
  return api(model, currentEngine, delimiter, quote);
}
